--[[
	Prerequisites
	==================================
	Domoticz v3.8837 or later (dzVents version 2.4 or later)
	NEEDS TO BE SPECIFIED
    Dummy switches that match the variables beneath
	CHANGE LOG: See https://github.com/Geo-Ron/dzVents/commits/master/dzAutomation.lua
	THANKS AND CONFETTI FOR:
	- Myself
	
]] --

local scriptVersion = "2.5.18"

-- Start User Defineable Variables
local ModeSelector = "Automation"
local ModeSelectorLevelNormal = 10
local ModeSelectorLevelManual = 20
local ModeSelectorLevelVacation = 30
local ModeSelectorLevelAway = 40
local ModeSelectorLevelAround = 50
local ModeSelectorSecond = "Automation Secundary"
local ModeSelectorSecondLevelNormal = 10
local ModeSelectorSecondLevelKidVac = 20 --Children are at home because of school holiday
local ModeSelectorSecondLevelPresOverr = 30 --Presence Detection Override
local ModeSelectorSecondLevelKidVacPresOver = 40 --Children school holiday Ã nd Presence detection Override
local HeatingScenesSelector = "Toon Scenes"
local HeatingScenesLevelVacation = 60 -- Holiday is set/scheduled through the Heatings System
local HeatingScenesLevelManual = 50 -- Program when set to manual.
local HeatingScenesLevelAway = 10 -- Program when everyone is away.
local HeatingAutoProgramSelector = "Toon Auto Programma"
local HeatingAutoProgramLevelAuto = 20 -- Level that starts the automatic heating schedule
local HeatingAutoProgramLevelOff = 10 -- Level that disables the automatic heating schedule
local HeatingSetpoint = "Toon Thermostaat"
local HeatingSetpointAround = 1.5 -- Temperature to lower when nobody home, but still in neighbourhood
local PresenceDetectionSwitch = "IemandThuis" --Switch indicates if someone is home (On=Home,Off=Away). Switch input generated by Life360 API Bash Script
local ScriptTimeInterval = 15 --In Minutes
local ScriptTimeRange = "between 06:00 and 22:00"
local DayTimeDevicesTimeRange = "at 6:00-18:00"
local DayTimeDevices = {
    "Radio Keuken"
} -- Devices that are on during the day
local WU_Device = "WU_THB"
local PresenceOverrideTimeRule = "on tue" --The days timer the presence detection override should be activated. only days
-- End User Defineable Variable

return {
    logging = {
        --level = domoticz.LOG_DEBUG, -- Uncomment to override the dzVents global logging setting
        marker = "dzAutomation_v" .. scriptVersion
    },
    on = {
        timer = {
            --'Every minute',
            "Every " .. ScriptTimeInterval .. " minutes " .. ScriptTimeRange
        },
        devices = {
            ModeSelector,
            HeatingScenesSelector --dzToon script update vanuit Toon -> Domoticz gaat met .silent()
            --PresenceDetectionSwitch
        }
    },
    execute = function(domoticz, device)
        local OperationMode = domoticz.devices(ModeSelector).level
        local OperationSecondMode = domoticz.devices(ModeSelectorSecond).level

        if (device.name ~= ModeSelector) and (domoticz.devices(ModeSelector).level == ModeSelectorLevelManual) then
            domoticz.log(
                "Initiation by device trigger. Changed " ..
                    device.name ..
                        " level:" ..
                            tostring(device.level) ..
                                " value: " .. tostring(device.value) .. " state: " .. tostring(device.state) .." lastLevel: " .. tostring(device.lastlevel),
                domoticz.LOG_INFO
            )
            domoticz.log(ModeSelector .. " changed. Systeem staat op handmatig. Ik doe NIKS!", domoticz.LOG_INFO)
            return
        end

        ----------------------------------------------------------
        -- On tuesdays the presence override needs to be activated
        -- this is when my parents-in-law are baysitting the house and kids, so they will no be left alone in the cold...

        -- times added to disable script overriding my manual overrides
        if domoticz.time.matchesRule("at 03:00-23:00 " .. PresenceOverrideTimeRule) then
            -- if on tuesday
            domoticz.log(
                "PresenceOverrideTimeRule is today. Changing ModeSelectorSecond level if needed",
                domoticz.LOG_DEBUG
            )
            if (domoticz.devices(ModeSelectorSecond).level == ModeSelectorSecondLevelKidVac) then
                if (domoticz.devices(ModeSelectorSecond).level ~= ModeSelectorSecondLevelKidVacPresOver) then
                    domoticz.devices(ModeSelectorSecond).switchSelector(ModeSelectorSecondLevelKidVacPresOver)
                end
            elseif (domoticz.devices(ModeSelectorSecond).level ~= ModeSelectorSecondLevelKidVacPresOver) then
                if (domoticz.devices(ModeSelectorSecond).level ~= ModeSelectorSecondLevelPresOverr) then
                    domoticz.devices(ModeSelectorSecond).switchSelector(ModeSelectorSecondLevelPresOverr)
                end
            end
        elseif (domoticz.devices(ModeSelectorSecond).level == ModeSelectorSecondLevelPresOverr and domoticz.time.matchesRule("at 23:00-23:59 " .. PresenceOverrideTimeRule)) then
            domoticz.log(
                "PresenceOverrideTimeRule is NOT today. Changing ModeSelectorSecond level if needed",
                domoticz.LOG_DEBUG
            )
            if (domoticz.devices(ModeSelectorSecond).level ~= ModeSelectorSecondLevelNormal) then
                domoticz.devices(ModeSelectorSecond).switchSelector(ModeSelectorSecondLevelNormal)
            end
        elseif (domoticz.devices(ModeSelectorSecond).level == ModeSelectorSecondLevelKidVacPresOverv and domoticz.time.matchesRule("at 23:00-23:59 " .. PresenceOverrideTimeRule)) then
            domoticz.log(
                "PresenceOverrideTimeRule is NOT today and it was a childrens holiday. Changing ModeSelectorSecond level if needed",
                domoticz.LOG_DEBUG
            )
            if (domoticz.devices(ModeSelectorSecond).level ~= ModeSelectorSecondLevelKidVac) then
                domoticz.devices(ModeSelectorSecond).switchSelector(ModeSelectorSecondLevelKidVac)
            end
        end

        if (device.isTimer) then --Start Timer Actions
            domoticz.log("Initiation by time trigger.", domoticz.LOG_DEBUG)
            if
                (domoticz.devices(HeatingScenesSelector).level == HeatingScenesLevelVacation and
                    domoticz.devices(ModeSelector).level ~= ModeSelectorLevelVacation)
             then
                domoticz.log("Verwarming staat op vakantie. Automatisering nog niet. Corrigeren", domoticz.LOG_DEBUG)
                --Echter pakt dit script NIET de device change op die door het Toon-Timer script gedaan wordt.
                domoticz.log("Thermostat notified Domoticz of vacation mode.", domoticz.LOG_INFO)
                domoticz.devices(ModeSelector).switchSelector(ModeSelectorLevelVacation).silent()
                domoticz.devices(ModeSelectorSecond).switchSelector(ModeSelectorSecondLevelNormal)
            elseif
                (domoticz.devices(HeatingScenesSelector).level ~= HeatingScenesLevelVacation and
                    domoticz.devices(ModeSelector).level == ModeSelectorLevelVacation)
             then
                domoticz.log(
                    "Thermostaat staat niet op vakantie. Automatisering wel nog. Corrigeren",
                    domoticz.LOG_DEBUG
                )
                --Echter pakt dit script NIET de device change op die door het Toon-Timer script gedaan wordt.
                domoticz.log(
                    "Thermostat notified Domoticz of disabled vacation mode. Changing automation to normal",
                    domoticz.LOG_INFO
                )
                domoticz.devices(ModeSelector).switchSelector(ModeSelectorLevelNormal)
                domoticz.devices(ModeSelectorSecond).switchSelector(ModeSelectorSecondLevelNormal)
            end
        else
            domoticz.log(
                "Initiation by device trigger. Changed " ..
                    device.name ..
                        " level:" ..
                            tostring(device.level) ..
                                " value: " .. tostring(device.value) .. " state: " .. tostring(device.state),
                domoticz.LOG_DEBUG
            )
        end

        if (device.name == ModeSelector) then
            if (device.level == ModeSelectorLevelNormal) then
                domoticz.log(
                    ModeSelector .. " changed. Systeem status Normaal of iedereen is weer terug",
                    domoticz.LOG_DEBUG
                )
                -- Thermostaat op auto programma zetten
                domoticz.log("Changing thermostat program to Auto.", domoticz.LOG_INFO)
                domoticz.devices(HeatingSetpoint).cancelQueuedCommands()
                domoticz.devices(HeatingAutoProgramSelector).switchSelector(HeatingAutoProgramLevelOff) --to compensate for errors
                domoticz.devices(HeatingAutoProgramSelector).switchSelector(HeatingAutoProgramLevelAuto)

                if domoticz.time.matchesRule(DayTimeDevicesTimeRange) then
                    domoticz.log("Time matches DayTimeDevicesTimeRange", domoticz.LOG_DEBUG)
                    local DayDevices = domoticz.devices().filter(DayTimeDevices)
                    DayDevices.forEach(
                        function(DayDevice)
                            domoticz.log("Switching Daytime device " .. DayDevice.name .. " on.", domoticz.LOG_DEBUG)
                            DayDevice.switchOn().checkFirst()
                        end
                    )
                end
            elseif (device.level == ModeSelectorLevelManual) then
                -- Systeem status handmatig
                domoticz.log(ModeSelector .. " changed. Systeem staat op handmatig. Ik doe NIKS!", domoticz.LOG_DEBUG)
            elseif
                (device.level == ModeSelectorLevelVacation and
                    domoticz.devices(HeatingScenesSelector).level ~= HeatingScenesLevelVacation)
             then
                -- Systeem status Vakantie
                -- Automation met de hand op vakantie gezet. Dit kan niet. wordt terug gezet naar normaal.
                domoticz.log(
                    "Domoticz set to vacation mode. This is not possible. Needs to be done through thermostat.",
                    domoticz.LOG_ERROR
                )
                domoticz.log(
                    "Domoticz switch " ..
                        device.name .. " will be reverted to level " .. tostring(device.lastLevel) .. ".",
                    domoticz.LOG_ERROR
                )
                if (device.lastLevel == nil) then
                    device.switchSelector(ModeSelectorLevelNormal)
                else
                    device.switchSelector(device.lastLevel).silent()
                end
            elseif (device.level == ModeSelectorLevelAway) then
                domoticz.log(ModeSelector .. " changed. Iedereen is weg", domoticz.LOG_DEBUG)
                -- Systeem status Weg
                if
                    (OperationSecondMode ~= ModeSelectorSecondLevelPresOverr and
                        OperationSecondMode ~= ModeSelectorSecondLevelKidVacPresOver and
                        domoticz.devices(ModeSelector).level ~= ModeSelectorLevelManual)
                 then
                    domoticz.log("Iedereen is zojuist vertrokken en geen override.", domoticz.LOG_DEBUG)
                    domoticz.devices(HeatingScenesSelector).switchSelector(HeatingScenesLevelAway)
                    --domoticz.devices(HeatingAutoProgramSelector).switchSelector(HeatingAutoProgramLevelOff)
                    --Als normaal de radio aan staat, deze uit zetten
                    if domoticz.time.matchesRule(DayTimeDevicesTimeRange) then
                        domoticz.log("Time matches DayTimeDevicesTimeRange", domoticz.LOG_DEBUG)
                        local DayDevices = domoticz.devices().filter(DayTimeDevices)
                        DayDevices.forEach(
                            function(DayDevice)
                                domoticz.log(
                                    "Switching Daytime device " .. DayDevice.name .. " off.",
                                    domoticz.LOG_DEBUG
                                )
                                DayDevice.switchOff().checkFirst()
                            end
                        )
                    end
                else
                    domoticz.log("Iedereen is zojuist vertrokken, maar override staat aan", domoticz.LOG_DEBUG)
                end
            -- elseif (device.level == ModeSelectorLevelAround) then
            --     domoticz.log(ModeSelector .. " changed. Iedereen is weg, maar wel in de buurt", domoticz.LOG_DEBUG)
            --     -- Systeem status Weg(Dichtbij)
            --     if
            --         (OperationSecondMode ~= ModeSelectorSecondLevelPresOverr and
            --             OperationSecondMode ~= ModeSelectorSecondLevelKidVacPresOver)
            --      then
            --         domoticz.log("Iemand is in de buurt en geen override.", domoticz.LOG_DEBUG)
            --         --Verwarming handmatig op twee graden lager zetten
            --         local CurrentSetpoint = domoticz.devices(HeatingSetpoint).setPoint
            --         domoticz.log(
            --             "Fetched setpoint from " .. HeatingSetpoint .. " with value: " .. CurrentSetpoint .. " degrees.",
            --             domoticz.LOG_DEBUG
            --         )
            --         -- local OutsideTemp = domoticz.devices(WU_Device).temperature
            --         -- domoticz.log(
            --         --     "Fetched outside Temp from " ..
            --         --         WU_Device .. " with value: " .. tostring(OutsideTemp) .. " degrees.",
            --         --     domoticz.LOG_DEBUG
            --         -- )
                    
            --         local toonSceneLevel = domoticz.devices(HeatingScenesSelector).level


            --         if (toonSceneLevel == HeatingScenesLevelAway) then
            --             --domoticz.devices(HeatingSetpoint).updateSetPoint(NewSetpoint) --.afterMin(30) --.afterMin on setpoint device currently is not supported
            --             domoticz.log(
            --                 "Someone is entering the neighborhood. Detected using HeatingScenes. Starting auto program",
            --                 domoticz.LOG_DEBUG
            --             )
            --             domoticz.devices(HeatingAutoProgramSelector).switchSelector(HeatingAutoProgramLevelOff) --to compensate for errors
            --             domoticz.devices(HeatingAutoProgramSelector).switchSelector(HeatingAutoProgramLevelAuto) --Not always working standalone
            --         else
            --             local NewSetpoint = CurrentSetpoint - HeatingSetpointAround
            --             domoticz.log(
            --                 "Someone is leaving the premises. Changing temperature to " ..
            --                     tostring(NewSetpoint) .. " degrees",
            --                 domoticz.LOG_DEBUG
            --             )
            --             domoticz.devices(HeatingSetpoint).updateSetPoint(NewSetpoint)
            --         end
            --         --Als normaal de radio aan staat, deze uit zetten
            --         if domoticz.time.matchesRule(DayTimeDevicesTimeRange) then
            --             domoticz.log("Time matches DayTimeDevicesTimeRange", domoticz.LOG_DEBUG)
            --             local DayDevices = domoticz.devices().filter(DayTimeDevices)
            --             DayDevices.forEach(
            --                 function(DayDevice)
            --                     domoticz.log(
            --                         "Switching Daytime device " .. DayDevice.name .. " off.",
            --                         domoticz.LOG_DEBUG
            --                     )
            --                     DayDevice.switchOff().checkFirst()
            --                 end
            --             )
            --         end
            --     else
            --         domoticz.log("Iedereen is zojuist vertrokken, maar override staat aan", domoticz.LOG_DEBUG)
            --     end
            end
        elseif (device.name == HeatingScenesSelector) then
            domoticz.log(HeatingScenesSelector .. " changed.", domoticz.LOG_DEBUG)
            if
                (device.level == HeatingScenesLevelVacation) and
                    (domoticz.devices(ModeSelector).level ~= ModeSelectorLevelVacation)
             then
                domoticz.log(
                    HeatingScenesSelector ..
                        " changed. Vacationmode On and " .. ModeSelector .. " has no Vacationlevel set.",
                    domoticz.LOG_DEBUG
                )
                -- Systeem status Vakantie. Wordt opgelegd door Toon
                domoticz.log("Thermostat notified Domoticz of vacation mode.", domoticz.LOG_INFO)
                domoticz.devices(ModeSelector).switchSelector(ModeSelectorLevelVacation).silent()
                domoticz.devices(ModeSelectorSecond).switchSelector(ModeSelectorSecondLevelNormal)
            elseif
                (device.level ~= HeatingScenesLevelVacation) and
                    (domoticz.devices(ModeSelector).level == ModeSelectorLevelVacation)
             then
                domoticz.log(
                    HeatingScenesSelector ..
                        " changed. Vacationmode Off and " .. ModeSelector .. " has Vacationlevel set.",
                    domoticz.LOG_DEBUG
                )
                -- Systeem status WAS Vakantie. Wordt opgelegd door Toon
                domoticz.log(
                    "Thermostat notified Domoticz of disabled vacation mode. Changing automation to normal",
                    domoticz.LOG_INFO
                )
                domoticz.devices(ModeSelector).switchSelector(ModeSelectorLevelNormal)
                domoticz.devices(ModeSelectorSecond).switchSelector(ModeSelectorSecondLevelNormal)
            end
        end
        domoticz.log("Reached the end of the script. Nothing more to do.", domoticz.LOG_DEBUG)
    end
}
